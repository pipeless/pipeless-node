/**
 * Pipeless
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ObjectLookup from './ObjectLookup';

/**
 * The InlineObject10 model module.
 * @module Pipeless/model/InlineObject10
 * @version 1.0
 */
class InlineObject10 {
    /**
     * Constructs a new <code>InlineObject10</code>.
     * @alias module:Pipeless/model/InlineObject10
     * @param _object {module:Pipeless/model/ObjectLookup} 
     * @param contentObjectType {module:Pipeless/model/InlineObject10.ContentObjectTypeEnum} The type of object that is being recommended.
     */
    constructor(_object, contentObjectType) { 
        
        InlineObject10.initialize(this, _object, contentObjectType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, _object, contentObjectType) { 
        obj['object'] = _object;
        obj['content_object_type'] = contentObjectType;
    }

    /**
     * Constructs a <code>InlineObject10</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:Pipeless/model/InlineObject10} obj Optional instance to populate.
     * @return {module:Pipeless/model/InlineObject10} The populated <code>InlineObject10</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineObject10();

            if (data.hasOwnProperty('object')) {
                obj['object'] = ObjectLookup.constructFromObject(data['object']);
            }
            if (data.hasOwnProperty('content_object_type')) {
                obj['content_object_type'] = ApiClient.convertToType(data['content_object_type'], 'String');
            }
            if (data.hasOwnProperty('primary_positive_relationship_type')) {
                obj['primary_positive_relationship_type'] = ApiClient.convertToType(data['primary_positive_relationship_type'], 'String');
            }
            if (data.hasOwnProperty('secondary_positive_relationship_type')) {
                obj['secondary_positive_relationship_type'] = ApiClient.convertToType(data['secondary_positive_relationship_type'], 'String');
            }
            if (data.hasOwnProperty('primary_negative_relationship_type')) {
                obj['primary_negative_relationship_type'] = ApiClient.convertToType(data['primary_negative_relationship_type'], 'String');
            }
            if (data.hasOwnProperty('content_tagged_relationship_type')) {
                obj['content_tagged_relationship_type'] = ApiClient.convertToType(data['content_tagged_relationship_type'], 'String');
            }
            if (data.hasOwnProperty('content_tag_object_type')) {
                obj['content_tag_object_type'] = ApiClient.convertToType(data['content_tag_object_type'], 'String');
            }
            if (data.hasOwnProperty('coldstart_tag_ids')) {
                obj['coldstart_tag_ids'] = ApiClient.convertToType(data['coldstart_tag_ids'], ['String']);
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {module:Pipeless/model/ObjectLookup} object
 */
InlineObject10.prototype['object'] = undefined;

/**
 * The type of object that is being recommended.
 * @member {module:Pipeless/model/InlineObject10.ContentObjectTypeEnum} content_object_type
 */
InlineObject10.prototype['content_object_type'] = undefined;

/**
 * The primary positive indicator a user can take on the content type that's being recommended. This should be the action a user can take that you consider most important to indicating that an object appeals to their tastes. If value is not provided, it will default to \"liked\".
 * @member {module:Pipeless/model/InlineObject10.PrimaryPositiveRelationshipTypeEnum} primary_positive_relationship_type
 * @default 'liked'
 */
InlineObject10.prototype['primary_positive_relationship_type'] = 'liked';

/**
 * The secondary positive indicator a user can take on the content type that's being recommended. This should be the action a user can take that you consider to be important in indicating that an object appeals to their tastes. It will be weighted less than the primary positive relationship type, but still taken into account. If value is not provided, it will default to \"viewed\".
 * @member {module:Pipeless/model/InlineObject10.SecondaryPositiveRelationshipTypeEnum} secondary_positive_relationship_type
 * @default 'viewed'
 */
InlineObject10.prototype['secondary_positive_relationship_type'] = 'viewed';

/**
 * The primary negative action a user can take on the content type. This should be the action a user can take that you consider to be important in indicating that an object does not appeal to their tastes. Content that the user marked with this type will not be returned in recommendation results. If value is not provided, it will default to \"disliked\".
 * @member {module:Pipeless/model/InlineObject10.PrimaryNegativeRelationshipTypeEnum} primary_negative_relationship_type
 * @default 'disliked'
 */
InlineObject10.prototype['primary_negative_relationship_type'] = 'disliked';

/**
 * Set this relationship to the relationship you use to set tags on the content that is being recommended. If a value is not provided, \"taggedWith\" will be used by default.
 * @member {module:Pipeless/model/InlineObject10.ContentTaggedRelationshipTypeEnum} content_tagged_relationship_type
 * @default 'taggedWith'
 */
InlineObject10.prototype['content_tagged_relationship_type'] = 'taggedWith';

/**
 * Set this relationship to the object you use for tags on the content that is being recommended. If a value is not provided, \"tag\" will be used by default.
 * @member {module:Pipeless/model/InlineObject10.ContentTagObjectTypeEnum} content_tag_object_type
 * @default 'tag'
 */
InlineObject10.prototype['content_tag_object_type'] = 'tag';

/**
 * You can use this option to provide some ids of tags you want to contribute to coldstart recommendations if no real recommendations are yet available for a user. If you provide one or more tag ids for this field, trending content from those tags will be used as coldstart recommendations when personalized recommendations are not available.
 * @member {Array.<String>} coldstart_tag_ids
 */
InlineObject10.prototype['coldstart_tag_ids'] = undefined;

/**
 * @member {Number} limit
 */
InlineObject10.prototype['limit'] = undefined;





/**
 * Allowed values for the <code>content_object_type</code> property.
 * @enum {String}
 * @readonly
 */
InlineObject10['ContentObjectTypeEnum'] = {

    /**
     * value: "user"
     * @const
     */
    "user": "user",

    /**
     * value: "product"
     * @const
     */
    "product": "product",

    /**
     * value: "image"
     * @const
     */
    "image": "image",

    /**
     * value: "comment"
     * @const
     */
    "comment": "comment",

    /**
     * value: "article"
     * @const
     */
    "article": "article",

    /**
     * value: "post"
     * @const
     */
    "post": "post",

    /**
     * value: "video"
     * @const
     */
    "video": "video",

    /**
     * value: "content"
     * @const
     */
    "content": "content",

    /**
     * value: "tag"
     * @const
     */
    "tag": "tag",

    /**
     * value: "category"
     * @const
     */
    "category": "category",

    /**
     * value: "app"
     * @const
     */
    "app": "app",

    /**
     * value: "book"
     * @const
     */
    "book": "book",

    /**
     * value: "person"
     * @const
     */
    "person": "person",

    /**
     * value: "skill"
     * @const
     */
    "skill": "skill",

    /**
     * value: "job"
     * @const
     */
    "job": "job",

    /**
     * value: "company"
     * @const
     */
    "company": "company",

    /**
     * value: "account"
     * @const
     */
    "account": "account",

    /**
     * value: "card"
     * @const
     */
    "card": "card",

    /**
     * value: "country"
     * @const
     */
    "country": "country",

    /**
     * value: "state"
     * @const
     */
    "state": "state",

    /**
     * value: "film"
     * @const
     */
    "film": "film",

    /**
     * value: "cart"
     * @const
     */
    "cart": "cart"
};


/**
 * Allowed values for the <code>primary_positive_relationship_type</code> property.
 * @enum {String}
 * @readonly
 */
InlineObject10['PrimaryPositiveRelationshipTypeEnum'] = {

    /**
     * value: "posted"
     * @const
     */
    "posted": "posted",

    /**
     * value: "followed"
     * @const
     */
    "followed": "followed",

    /**
     * value: "liked"
     * @const
     */
    "liked": "liked",

    /**
     * value: "favorited"
     * @const
     */
    "favorited": "favorited",

    /**
     * value: "saved"
     * @const
     */
    "saved": "saved",

    /**
     * value: "disliked"
     * @const
     */
    "disliked": "disliked",

    /**
     * value: "purchased"
     * @const
     */
    "purchased": "purchased",

    /**
     * value: "commentedOn"
     * @const
     */
    "commentedOn": "commentedOn",

    /**
     * value: "created"
     * @const
     */
    "created": "created",

    /**
     * value: "viewed"
     * @const
     */
    "viewed": "viewed",

    /**
     * value: "reported"
     * @const
     */
    "reported": "reported",

    /**
     * value: "blocked"
     * @const
     */
    "blocked": "blocked",

    /**
     * value: "deleted"
     * @const
     */
    "deleted": "deleted",

    /**
     * value: "authored"
     * @const
     */
    "authored": "authored",

    /**
     * value: "used"
     * @const
     */
    "used": "used",

    /**
     * value: "dismissed"
     * @const
     */
    "dismissed": "dismissed",

    /**
     * value: "loggedIn"
     * @const
     */
    "loggedIn": "loggedIn",

    /**
     * value: "taggedWith"
     * @const
     */
    "taggedWith": "taggedWith",

    /**
     * value: "categorizedIn"
     * @const
     */
    "categorizedIn": "categorizedIn",

    /**
     * value: "interestedIn"
     * @const
     */
    "interestedIn": "interestedIn",

    /**
     * value: "locatedIn"
     * @const
     */
    "locatedIn": "locatedIn",

    /**
     * value: "readQuarter"
     * @const
     */
    "readQuarter": "readQuarter",

    /**
     * value: "readHalf"
     * @const
     */
    "readHalf": "readHalf",

    /**
     * value: "readAll"
     * @const
     */
    "readAll": "readAll",

    /**
     * value: "subscribedTo"
     * @const
     */
    "subscribedTo": "subscribedTo",

    /**
     * value: "subscribedFrom"
     * @const
     */
    "subscribedFrom": "subscribedFrom",

    /**
     * value: "addedTo"
     * @const
     */
    "addedTo": "addedTo",

    /**
     * value: "madeBy"
     * @const
     */
    "madeBy": "madeBy",

    /**
     * value: "pausedOn"
     * @const
     */
    "pausedOn": "pausedOn"
};


/**
 * Allowed values for the <code>secondary_positive_relationship_type</code> property.
 * @enum {String}
 * @readonly
 */
InlineObject10['SecondaryPositiveRelationshipTypeEnum'] = {

    /**
     * value: "posted"
     * @const
     */
    "posted": "posted",

    /**
     * value: "followed"
     * @const
     */
    "followed": "followed",

    /**
     * value: "liked"
     * @const
     */
    "liked": "liked",

    /**
     * value: "favorited"
     * @const
     */
    "favorited": "favorited",

    /**
     * value: "saved"
     * @const
     */
    "saved": "saved",

    /**
     * value: "disliked"
     * @const
     */
    "disliked": "disliked",

    /**
     * value: "purchased"
     * @const
     */
    "purchased": "purchased",

    /**
     * value: "commentedOn"
     * @const
     */
    "commentedOn": "commentedOn",

    /**
     * value: "created"
     * @const
     */
    "created": "created",

    /**
     * value: "viewed"
     * @const
     */
    "viewed": "viewed",

    /**
     * value: "reported"
     * @const
     */
    "reported": "reported",

    /**
     * value: "blocked"
     * @const
     */
    "blocked": "blocked",

    /**
     * value: "deleted"
     * @const
     */
    "deleted": "deleted",

    /**
     * value: "authored"
     * @const
     */
    "authored": "authored",

    /**
     * value: "used"
     * @const
     */
    "used": "used",

    /**
     * value: "dismissed"
     * @const
     */
    "dismissed": "dismissed",

    /**
     * value: "loggedIn"
     * @const
     */
    "loggedIn": "loggedIn",

    /**
     * value: "taggedWith"
     * @const
     */
    "taggedWith": "taggedWith",

    /**
     * value: "categorizedIn"
     * @const
     */
    "categorizedIn": "categorizedIn",

    /**
     * value: "interestedIn"
     * @const
     */
    "interestedIn": "interestedIn",

    /**
     * value: "locatedIn"
     * @const
     */
    "locatedIn": "locatedIn",

    /**
     * value: "readQuarter"
     * @const
     */
    "readQuarter": "readQuarter",

    /**
     * value: "readHalf"
     * @const
     */
    "readHalf": "readHalf",

    /**
     * value: "readAll"
     * @const
     */
    "readAll": "readAll",

    /**
     * value: "subscribedTo"
     * @const
     */
    "subscribedTo": "subscribedTo",

    /**
     * value: "subscribedFrom"
     * @const
     */
    "subscribedFrom": "subscribedFrom",

    /**
     * value: "addedTo"
     * @const
     */
    "addedTo": "addedTo",

    /**
     * value: "madeBy"
     * @const
     */
    "madeBy": "madeBy",

    /**
     * value: "pausedOn"
     * @const
     */
    "pausedOn": "pausedOn"
};


/**
 * Allowed values for the <code>primary_negative_relationship_type</code> property.
 * @enum {String}
 * @readonly
 */
InlineObject10['PrimaryNegativeRelationshipTypeEnum'] = {

    /**
     * value: "posted"
     * @const
     */
    "posted": "posted",

    /**
     * value: "followed"
     * @const
     */
    "followed": "followed",

    /**
     * value: "liked"
     * @const
     */
    "liked": "liked",

    /**
     * value: "favorited"
     * @const
     */
    "favorited": "favorited",

    /**
     * value: "saved"
     * @const
     */
    "saved": "saved",

    /**
     * value: "disliked"
     * @const
     */
    "disliked": "disliked",

    /**
     * value: "purchased"
     * @const
     */
    "purchased": "purchased",

    /**
     * value: "commentedOn"
     * @const
     */
    "commentedOn": "commentedOn",

    /**
     * value: "created"
     * @const
     */
    "created": "created",

    /**
     * value: "viewed"
     * @const
     */
    "viewed": "viewed",

    /**
     * value: "reported"
     * @const
     */
    "reported": "reported",

    /**
     * value: "blocked"
     * @const
     */
    "blocked": "blocked",

    /**
     * value: "deleted"
     * @const
     */
    "deleted": "deleted",

    /**
     * value: "authored"
     * @const
     */
    "authored": "authored",

    /**
     * value: "used"
     * @const
     */
    "used": "used",

    /**
     * value: "dismissed"
     * @const
     */
    "dismissed": "dismissed",

    /**
     * value: "loggedIn"
     * @const
     */
    "loggedIn": "loggedIn",

    /**
     * value: "taggedWith"
     * @const
     */
    "taggedWith": "taggedWith",

    /**
     * value: "categorizedIn"
     * @const
     */
    "categorizedIn": "categorizedIn",

    /**
     * value: "interestedIn"
     * @const
     */
    "interestedIn": "interestedIn",

    /**
     * value: "locatedIn"
     * @const
     */
    "locatedIn": "locatedIn",

    /**
     * value: "readQuarter"
     * @const
     */
    "readQuarter": "readQuarter",

    /**
     * value: "readHalf"
     * @const
     */
    "readHalf": "readHalf",

    /**
     * value: "readAll"
     * @const
     */
    "readAll": "readAll",

    /**
     * value: "subscribedTo"
     * @const
     */
    "subscribedTo": "subscribedTo",

    /**
     * value: "subscribedFrom"
     * @const
     */
    "subscribedFrom": "subscribedFrom",

    /**
     * value: "addedTo"
     * @const
     */
    "addedTo": "addedTo",

    /**
     * value: "madeBy"
     * @const
     */
    "madeBy": "madeBy",

    /**
     * value: "pausedOn"
     * @const
     */
    "pausedOn": "pausedOn"
};


/**
 * Allowed values for the <code>content_tagged_relationship_type</code> property.
 * @enum {String}
 * @readonly
 */
InlineObject10['ContentTaggedRelationshipTypeEnum'] = {

    /**
     * value: "posted"
     * @const
     */
    "posted": "posted",

    /**
     * value: "followed"
     * @const
     */
    "followed": "followed",

    /**
     * value: "liked"
     * @const
     */
    "liked": "liked",

    /**
     * value: "favorited"
     * @const
     */
    "favorited": "favorited",

    /**
     * value: "saved"
     * @const
     */
    "saved": "saved",

    /**
     * value: "disliked"
     * @const
     */
    "disliked": "disliked",

    /**
     * value: "purchased"
     * @const
     */
    "purchased": "purchased",

    /**
     * value: "commentedOn"
     * @const
     */
    "commentedOn": "commentedOn",

    /**
     * value: "created"
     * @const
     */
    "created": "created",

    /**
     * value: "viewed"
     * @const
     */
    "viewed": "viewed",

    /**
     * value: "reported"
     * @const
     */
    "reported": "reported",

    /**
     * value: "blocked"
     * @const
     */
    "blocked": "blocked",

    /**
     * value: "deleted"
     * @const
     */
    "deleted": "deleted",

    /**
     * value: "authored"
     * @const
     */
    "authored": "authored",

    /**
     * value: "used"
     * @const
     */
    "used": "used",

    /**
     * value: "dismissed"
     * @const
     */
    "dismissed": "dismissed",

    /**
     * value: "loggedIn"
     * @const
     */
    "loggedIn": "loggedIn",

    /**
     * value: "taggedWith"
     * @const
     */
    "taggedWith": "taggedWith",

    /**
     * value: "categorizedIn"
     * @const
     */
    "categorizedIn": "categorizedIn",

    /**
     * value: "interestedIn"
     * @const
     */
    "interestedIn": "interestedIn",

    /**
     * value: "locatedIn"
     * @const
     */
    "locatedIn": "locatedIn",

    /**
     * value: "readQuarter"
     * @const
     */
    "readQuarter": "readQuarter",

    /**
     * value: "readHalf"
     * @const
     */
    "readHalf": "readHalf",

    /**
     * value: "readAll"
     * @const
     */
    "readAll": "readAll",

    /**
     * value: "subscribedTo"
     * @const
     */
    "subscribedTo": "subscribedTo",

    /**
     * value: "subscribedFrom"
     * @const
     */
    "subscribedFrom": "subscribedFrom",

    /**
     * value: "addedTo"
     * @const
     */
    "addedTo": "addedTo",

    /**
     * value: "madeBy"
     * @const
     */
    "madeBy": "madeBy",

    /**
     * value: "pausedOn"
     * @const
     */
    "pausedOn": "pausedOn"
};


/**
 * Allowed values for the <code>content_tag_object_type</code> property.
 * @enum {String}
 * @readonly
 */
InlineObject10['ContentTagObjectTypeEnum'] = {

    /**
     * value: "user"
     * @const
     */
    "user": "user",

    /**
     * value: "product"
     * @const
     */
    "product": "product",

    /**
     * value: "image"
     * @const
     */
    "image": "image",

    /**
     * value: "comment"
     * @const
     */
    "comment": "comment",

    /**
     * value: "article"
     * @const
     */
    "article": "article",

    /**
     * value: "post"
     * @const
     */
    "post": "post",

    /**
     * value: "video"
     * @const
     */
    "video": "video",

    /**
     * value: "content"
     * @const
     */
    "content": "content",

    /**
     * value: "tag"
     * @const
     */
    "tag": "tag",

    /**
     * value: "category"
     * @const
     */
    "category": "category",

    /**
     * value: "app"
     * @const
     */
    "app": "app",

    /**
     * value: "book"
     * @const
     */
    "book": "book",

    /**
     * value: "person"
     * @const
     */
    "person": "person",

    /**
     * value: "skill"
     * @const
     */
    "skill": "skill",

    /**
     * value: "job"
     * @const
     */
    "job": "job",

    /**
     * value: "company"
     * @const
     */
    "company": "company",

    /**
     * value: "account"
     * @const
     */
    "account": "account",

    /**
     * value: "card"
     * @const
     */
    "card": "card",

    /**
     * value: "country"
     * @const
     */
    "country": "country",

    /**
     * value: "state"
     * @const
     */
    "state": "state",

    /**
     * value: "film"
     * @const
     */
    "film": "film",

    /**
     * value: "cart"
     * @const
     */
    "cart": "cart"
};



export default InlineObject10;

