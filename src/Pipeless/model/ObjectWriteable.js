/**
 * Pipeless
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ObjectType from './ObjectType';

/**
 * The ObjectWriteable model module.
 * @module Pipeless/model/ObjectWriteable
 * @version 1.0
 */
class ObjectWriteable {
    /**
     * Constructs a new <code>ObjectWriteable</code>.
     * An object to be written to your data. Only one object can exist for each type + id combo. If any of your write patterns provide an object that doesn&#39;t exist, it will be created. If the object already exists, the existing object will be used in your write operation, and if created_on or modified_on differ from the values already associated with the object, those values will be updated.
     * @alias module:Pipeless/model/ObjectWriteable
     * @param id {String} The id of your object. The id can be a string (up to 40 characters) containing any number, alpha character, spaces, or the following special characters: @-!#%^&()/+=;:'\"?<>\\][{}.,
     * @param type {module:Pipeless/model/ObjectType} 
     */
    constructor(id, type) { 
        
        ObjectWriteable.initialize(this, id, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, type) { 
        obj['id'] = id;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ObjectWriteable</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:Pipeless/model/ObjectWriteable} obj Optional instance to populate.
     * @return {module:Pipeless/model/ObjectWriteable} The populated <code>ObjectWriteable</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ObjectWriteable();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ObjectType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('created_on')) {
                obj['created_on'] = ApiClient.convertToType(data['created_on'], 'Date');
            }
            if (data.hasOwnProperty('modified_on')) {
                obj['modified_on'] = ApiClient.convertToType(data['modified_on'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * The id of your object. The id can be a string (up to 40 characters) containing any number, alpha character, spaces, or the following special characters: @-!#%^&()/+=;:'\"?<>\\][{}.,
 * @member {String} id
 */
ObjectWriteable.prototype['id'] = undefined;

/**
 * @member {module:Pipeless/model/ObjectType} type
 */
ObjectWriteable.prototype['type'] = undefined;

/**
 * An optional DateTime string in the format YYYY-MM-DDTHH:MM:SS in whatever timezone you use. If not set, and the object needs to be created, this value will be set to the current UTC time.
 * @member {Date} created_on
 */
ObjectWriteable.prototype['created_on'] = undefined;

/**
 * An optional DateTime string in the format YYYY-MM-DDTHH:MM:SS in whatever timezone you use. If not set, the value will be set to the same value as created_on.
 * @member {Date} modified_on
 */
ObjectWriteable.prototype['modified_on'] = undefined;






export default ObjectWriteable;

