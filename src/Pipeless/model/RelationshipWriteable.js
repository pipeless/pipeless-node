/**
 * Pipeless
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RelationshipType from './RelationshipType';

/**
 * The RelationshipWriteable model module.
 * @module Pipeless/model/RelationshipWriteable
 * @version 1.0
 */
class RelationshipWriteable {
    /**
     * Constructs a new <code>RelationshipWriteable</code>.
     * @alias module:Pipeless/model/RelationshipWriteable
     * @param type {module:Pipeless/model/RelationshipType} 
     */
    constructor(type) { 
        
        RelationshipWriteable.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>RelationshipWriteable</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:Pipeless/model/RelationshipWriteable} obj Optional instance to populate.
     * @return {module:Pipeless/model/RelationshipWriteable} The populated <code>RelationshipWriteable</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RelationshipWriteable();

            if (data.hasOwnProperty('type')) {
                obj['type'] = RelationshipType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('created_on')) {
                obj['created_on'] = ApiClient.convertToType(data['created_on'], 'Date');
            }
            if (data.hasOwnProperty('single')) {
                obj['single'] = ApiClient.convertToType(data['single'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * @member {module:Pipeless/model/RelationshipType} type
 */
RelationshipWriteable.prototype['type'] = undefined;

/**
 * An optional DateTime string in the format YYYY-MM-DDTHH:MM:SS in whatever timezone you use. If not set, and the relationship needs to be created, this value will be set to the current UTC time.
 * @member {Date} created_on
 */
RelationshipWriteable.prototype['created_on'] = undefined;

/**
 * Whether the relationship can be duplicated or not. If single is true (default), then a relationship of each type can only exist once between the same start and end objects. If false, a relationship of the same type can exist multiple times between the same start and end objects.
 * @member {Boolean} single
 */
RelationshipWriteable.prototype['single'] = undefined;






export default RelationshipWriteable;

