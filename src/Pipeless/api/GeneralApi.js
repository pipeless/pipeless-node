/**
 * Pipeless
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Errors from '../model/Errors';
import GetRecentEventsConfig from '../model/GetRecentEventsConfig';
import GetRecentEventsResultItem from '../model/GetRecentEventsResultItem';
import ObjectReadable from '../model/ObjectReadable';
import RelationshipCountsResult from '../model/RelationshipCountsResult';
import RelationshipExistsResult from '../model/RelationshipExistsResult';

/**
* General service.
* @module Pipeless/api/GeneralApi
* @version 1.0
*/
export default class GeneralApi {

    /**
    * Constructs a new GeneralApi. 
    * @alias module:Pipeless/api/GeneralApi
    * @class
    * @param {module:Pipeless/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:Pipeless/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createEvent operation.
     * @callback module:Pipeless/api/GeneralApi~createEventCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Event
     * Create a single event. 
     * @param {Number} appId 
     * @param {Object} opts Optional parameters
     * @param {module:Pipeless/api/GeneralApi~createEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createEvent(appId, opts, callback) {
      opts = opts || {};
      let postBody = opts;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createEvent");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['App_API_Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/apps/{app_id}/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEventsBatch operation.
     * @callback module:Pipeless/api/GeneralApi~createEventsBatchCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Events Batch
     * Create up to 10 events in one API call.
     * @param {Number} appId 
     * @param {Object} opts Optional parameters
     * @param {module:Pipeless/api/GeneralApi~createEventsBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createEventsBatch(appId, opts, callback) {
      opts = opts || {};
      let postBody = opts;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createEventsBatch");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['App_API_Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/apps/{app_id}/events/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAllObjectsByType operation.
     * @callback module:Pipeless/api/GeneralApi~deleteAllObjectsByTypeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete All Objects by Type
     * Delete all objects (and associated events) of a specific object type.
     * @param {Number} appId 
     * @param {Object} opts Optional parameters
     * @param {module:Pipeless/api/GeneralApi~deleteAllObjectsByTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteAllObjectsByType(appId, opts, callback) {
      opts = opts || {};
      let postBody = opts;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteAllObjectsByType");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['App_API_Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/apps/{app_id}/objects/all', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEvent operation.
     * @callback module:Pipeless/api/GeneralApi~deleteEventCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Event
     * Delete one or more events.
     * @param {Number} appId 
     * @param {Object} opts Optional parameters
     * @param {module:Pipeless/api/GeneralApi~deleteEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteEvent(appId, opts, callback) {
      opts = opts || {};
      let postBody = opts;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteEvent");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['App_API_Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/apps/{app_id}/events', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteObject operation.
     * @callback module:Pipeless/api/GeneralApi~deleteObjectCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Object
     * Delete a single object and all the relationships/events it's connected to.
     * @param {Number} appId 
     * @param {Object} opts Optional parameters
     * @param {module:Pipeless/api/GeneralApi~deleteObjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteObject(appId, opts, callback) {
      opts = opts || {};
      let postBody = opts;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteObject");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['App_API_Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/apps/{app_id}/objects', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editObject operation.
     * @callback module:Pipeless/api/GeneralApi~editObjectCallback
     * @param {String} error Error message, if any.
     * @param {module:Pipeless/model/ObjectReadable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit Object
     * Edit the properties of an existing object.
     * @param {Number} appId 
     * @param {Object} opts Optional parameters
     * @param {module:Pipeless/api/GeneralApi~editObjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Pipeless/model/ObjectReadable}
     */
    editObject(appId, opts, callback) {
      opts = opts || {};
      let postBody = opts;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling editObject");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['App_API_Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ObjectReadable;
      return this.apiClient.callApi(
        '/v1/apps/{app_id}/objects', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getObject operation.
     * @callback module:Pipeless/api/GeneralApi~getObjectCallback
     * @param {String} error Error message, if any.
     * @param {module:Pipeless/model/ObjectReadable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Object
     * Get basic info on a single object.
     * @param {Number} appId 
     * @param {Object} opts Optional parameters
     * @param {module:Pipeless/api/GeneralApi~getObjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Pipeless/model/ObjectReadable}
     */
    getObject(appId, opts, callback) {
      opts = opts || {};
      let postBody = opts;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getObject");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['App_API_Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ObjectReadable;
      return this.apiClient.callApi(
        '/v1/apps/{app_id}/objects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecentEvents operation.
     * @callback module:Pipeless/api/GeneralApi~getRecentEventsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:Pipeless/model/GetRecentEventsResultItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Recent Events
     * Get recent events that have been sent to the specified app.
     * @param {Number} appId 
     * @param {Object} opts Optional parameters
     * @param {module:Pipeless/api/GeneralApi~getRecentEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:Pipeless/model/GetRecentEventsResultItem>}
     */
    getRecentEvents(appId, opts, callback) {
      opts = opts || {};
      let postBody = opts;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getRecentEvents");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['App_API_Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [GetRecentEventsResultItem];
      return this.apiClient.callApi(
        '/v1/apps/{app_id}/recent-events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRelationshipCounts operation.
     * @callback module:Pipeless/api/GeneralApi~getRelationshipCountsCallback
     * @param {String} error Error message, if any.
     * @param {module:Pipeless/model/RelationshipCountsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Relationship Counts
     * Get the counts of 1 or 2 relationships from/to a given object.
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {module:Pipeless/api/GeneralApi~getRelationshipCountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Pipeless/model/RelationshipCountsResult}
     */
    getRelationshipCounts(appId, opts, callback) {
      opts = opts || {};
      let postBody = opts;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getRelationshipCounts");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['App_API_Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RelationshipCountsResult;
      return this.apiClient.callApi(
        '/v1/apps/{app_id}/relationship-counts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRelationshipExists operation.
     * @callback module:Pipeless/api/GeneralApi~getRelationshipExistsCallback
     * @param {String} error Error message, if any.
     * @param {module:Pipeless/model/RelationshipExistsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Relationship Exists
     * Determines if a given relationship of a specific type exists from the specified object to the specified end object.
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {module:Pipeless/api/GeneralApi~getRelationshipExistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Pipeless/model/RelationshipExistsResult}
     */
    getRelationshipExists(appId, opts, callback) {
      opts = opts || {};
      let postBody = opts;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getRelationshipExists");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['App_API_Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RelationshipExistsResult;
      return this.apiClient.callApi(
        '/v1/apps/{app_id}/relationship-exists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
