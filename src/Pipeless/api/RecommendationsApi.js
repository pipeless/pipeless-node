/**
 * Pipeless
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Errors from '../model/Errors';
import RecommendationsContentResult from '../model/RecommendationsContentResult';
import RecommendationsResult from '../model/RecommendationsResult';

/**
* Recommendations service.
* @module Pipeless/api/RecommendationsApi
* @version 1.0
*/
export default class RecommendationsApi {

    /**
    * Constructs a new RecommendationsApi. 
    * @alias module:Pipeless/api/RecommendationsApi
    * @class
    * @param {module:Pipeless/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:Pipeless/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getRecommendedContent operation.
     * @callback module:Pipeless/api/RecommendationsApi~getRecommendedContentCallback
     * @param {String} error Error message, if any.
     * @param {module:Pipeless/model/RecommendationsContentResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Recommended Content (for user)
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {module:Pipeless/api/RecommendationsApi~getRecommendedContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Pipeless/model/RecommendationsContentResult}
     */
    getRecommendedContent(appId, opts, callback) {
      opts = opts || {};
      let postBody = opts;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getRecommendedContent");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['App_API_Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecommendationsContentResult;
      return this.apiClient.callApi(
        '/v1/apps/{app_id}/algos/recommendations/content', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecommendedUsersToFollow operation.
     * @callback module:Pipeless/api/RecommendationsApi~getRecommendedUsersToFollowCallback
     * @param {String} error Error message, if any.
     * @param {module:Pipeless/model/RecommendationsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Recommended Users to Follow (for user)
     * For a given user (or any object type), get a list of recommended users for the target user to follow, based on their behavior/tastes.
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {module:Pipeless/api/RecommendationsApi~getRecommendedUsersToFollowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Pipeless/model/RecommendationsResult}
     */
    getRecommendedUsersToFollow(appId, opts, callback) {
      opts = opts || {};
      let postBody = opts;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getRecommendedUsersToFollow");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['App_API_Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecommendationsResult;
      return this.apiClient.callApi(
        '/v1/apps/{app_id}/algos/recommendations/users-to-follow', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRelatedContent operation.
     * @callback module:Pipeless/api/RecommendationsApi~getRelatedContentCallback
     * @param {String} error Error message, if any.
     * @param {module:Pipeless/model/RecommendationsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Related Content
     * Gets related content objects based on a specific piece of content of any type.
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {module:Pipeless/api/RecommendationsApi~getRelatedContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Pipeless/model/RecommendationsResult}
     */
    getRelatedContent(appId, opts, callback) {
      opts = opts || {};
      let postBody = opts;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getRelatedContent");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['App_API_Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecommendationsResult;
      return this.apiClient.callApi(
        '/v1/apps/{app_id}/algos/recommendations/related-content', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRelatedTags operation.
     * @callback module:Pipeless/api/RecommendationsApi~getRelatedTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:Pipeless/model/RecommendationsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Related Tags
     * Gets related tags for a given tag (or any other object type, ex. category).
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {module:Pipeless/api/RecommendationsApi~getRelatedTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Pipeless/model/RecommendationsResult}
     */
    getRelatedTags(appId, opts, callback) {
      opts = opts || {};
      let postBody = opts;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getRelatedTags");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['App_API_Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecommendationsResult;
      return this.apiClient.callApi(
        '/v1/apps/{app_id}/algos/recommendations/related-tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRelatedUsers operation.
     * @callback module:Pipeless/api/RecommendationsApi~getRelatedUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:Pipeless/model/RecommendationsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Related Users
     * Get related users based on a target user (or other type).
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {module:Pipeless/api/RecommendationsApi~getRelatedUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Pipeless/model/RecommendationsResult}
     */
    getRelatedUsers(appId, opts, callback) {
      opts = opts || {};
      let postBody = opts;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getRelatedUsers");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['App_API_Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecommendationsResult;
      return this.apiClient.callApi(
        '/v1/apps/{app_id}/algos/recommendations/related-users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
